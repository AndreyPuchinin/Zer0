ТЗ Zero(/7ER0/Зер0/Зеро)

ТЕРМИНОЛОГИЯ

0.//комментарий

1.Библиотека - набор карт, собранных вместе по той или иной причине (например, смысловой, - зависит от программиста Зеро).

1.Карта - структура данных с именем, которому соотвутствует массив значений. 
  Имя и значения - исключительно строки с учетом регистра 
  
  //уточнить кодировку!
  
  Например:
  ( "Name": [ "Val-1" , "Val-2" ] )
  
  При упоминании в строке значения карты, алгоритм будет искать соотвтствующее имя карты, которой принадлежит данное значение. Поэтому реализовывать структуру карты через словарь может быть не вполне удобно - так как он работает ровно наоборот: по ключу получается значение.
  Значения карты не могут повторять друг друга в точности в рамкамх значений одной карты и всех других карт.
  Имена карт среди всех карт также не повторяются.
  
2.Ссылка на карту - строка, повторяющая в точности имя какой-то карты.

3.Карта-самоссылка - карта, в которой хотя бы одно значение (значение-самоссылка) содержит полное и точное вхождение имени. 
  
  Например:
  ( "vals" : "vals&val" )
  
4.Карта-шаблон - карта, в которой хотя бы одно значение (то есть шаблонное значение) содержит ссылку на другую карту.

  // уточнить, может ли шаблон ссылаться на себя? - вероятнее всего нет
  
  Например:
  ( "number"   : "1" )
  ( "number*2" : "number+number") //шаблон со ссылкой "number"
 
5.Значение ссылки - подстрока входной строки, которая заменяется алгоритмом Зеро на имя той или иной карты: обычной ли, шаблоннной ли, самоссылки ли.
 
//Одна и та же карта может содержать как обычные значения, так и шаблонные или самоссылки!

6.Тип ссылки - если в шаблоне более, чем одна ссылка на разные карты, то для ссылка на каждую такую карту носит отдельный тип.

7.Коллизия - неопределенность замены при неравных значениях ссылок шаблонной карты.

________________________________________________

ТРЕБОВАНИЯ К АЛГОРИТМУ:
Структура карт не должна приводить к бесконечному циклу алгоритма.

________________________________________________

АЛГОРИТМ:

1.На вход подается входная строка и библиотека.

------------------------------------------------

I.Прямые замены:

2.Курсор бежит по входной строке и перебирает символы в ней. Курсор всегда указывает на один (текущий) символ.
3.Алгоритм ищет в строке все полные и точные вхождения всех обычных значений всех карт из библиотеки.
  Если при первом пробеге строки до конца таких не оказалось, алгоритм возвращает входную строку и сообщение о том, что не было найдено ни одной карты.
4.Результатом поиска должен быть массив всех самых близких значений во входной строке. Очевидно, позиция вхождения всех их во входной строке будет одной и той же.
5.Берется самое длинное значение из всех оставшихся.
*.На этапе ввода карт отсекается возможность введения второй карты с тем же началом, что и у любой другой, той же длиной, но разными символами после первого.
6.Данное единственно-оставшееся значение в строке заменяется на имя, ему соотвтетсвующее. При этом позиция курсора перерасчитывается с учетом длин удаленного значения и подставленного имени.
7.При этом формируется результативный массив:
7.1 При каждой замене до конца строки в массив замен добавляется информация о замене: заменяемое значение, замещающее имя и координата замены в строке.
7.2 При каждом новом проходе по строке в результативный массив дополняется массив замен.
8.Как только курсор упирается в конец строки, он переводится заново в начало и алгоритм прямых замен повторяется.
9.Как только среди всех карт не находится ни одного обычного значения между самым началом и самым концом строки, алгоритм прямых замен завершается возвращается конечное преобразование строки с массивом или сообщением об отсуствии замен обычных значений, и начинается алгоритм замен-самоссылок.

Пример результативного массива для Прямых замен.
[
  ["A" , "1"],
  ["A" , "2"],
]

------------------------------------------------

II.Замены самоссылок:

10.Повторяется алгоритм Прямых замен, только не для обычных значений, а для значений-самоссылок. Также возвращается строка и массив или сообщение об отсутствии замен значений-самоссылок.

------------------------------------------------

III.Шаблонные замены:

11.Повторение алгоритма замен-самоссылок, только для шаблонных значений. Также возвращается строка и массив или сообщение об отсутствии замен шаблонных значений.

Пример результативного массива для Шаблонных замен:
[
  ["2A" , "A+A"]
]

------------------------------------------------

IV.Обратные шаблонные замены:

12.Перебирается массив шаблонных замен. Согласно информации из него восстанавливаются значения ссылок, и, если для одной шаблонной замены каждый тип ссылки имеет под собой одно и то же значение, это шаблонное значение из массива заменяется внутри строки на имя данного шаблона, только с соотвтествующими значениями вместо имен ссылок. Если нет - возвращается входная строка и сообщение о коллизии и её содержании.

------------------------------------------------

V.Обратные замены самоссылок:

13.Повторяется алгоритм обратных шаблонных замен, только не для шаблонных значений, а для значений-самоссылок. Также возвращается строка.

//Возможно ли, что на этом этапе потребуется возвращать какое-то сообщение?.. 

------------------------------------------------

VI.Завершение алгоритма.

14.Возвращается преобразованная строка, если были хоть какие-то обратные замены и не было коллизий. Если строка не была преобразована ввиду коллизий или отсуствия найденных карт, то возвращается входная строка без изменений вместе с сообщениями о причине отказа работы.
